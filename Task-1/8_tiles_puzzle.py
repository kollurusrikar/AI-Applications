# -*- coding: utf-8 -*-
"""8 Tiles Puzzle.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1znO75ijtNnH0IfzrlowJtrztQ1PXMO1s

#8 Tiles  Puzzle
"""

from queue import PriorityQueue

goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]

R = 3
C = 3

initial_state = []
print("Enter the entries rowwise:")
for i in range(R):
    a = []
    for j in range(C):
        a.append(int(input()))
    initial_state.append(a)
print("\n")

def manhattan_distance(state):
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                row = (state[i][j] - 1) // 3
                col = (state[i][j] - 1) % 3
                distance += abs(i - row) + abs(j - col)
    return distance

class PuzzleNode:
    def __init__(self, state, parent=None, action=None):
        self.state = state
        self.parent = parent
        self.action = action
        self.cost = parent.cost + 1 if parent else 0
        self.heuristic = manhattan_distance(state)
        self.priority = self.cost + self.heuristic

    def __lt__(self, other):
        return self.priority < other.priority

def solve_puzzle(initial_state, goal_state):
    open_set = PriorityQueue()
    closed_set = set()
    initial_node = PuzzleNode(initial_state)
    open_set.put(initial_node)
    while not open_set.empty():
        current_node = open_set.get()
        if current_node.state == goal_state:
            solution_path = []
            while current_node:
                solution_path.append(current_node.state)
                current_node = current_node.parent
            return reversed(solution_path)

        closed_set.add(tuple(map(tuple, current_node.state)))
        row, col = next((i, j) for i in range(3) for j in range(3) if current_node.state[i][j] == 0)
        moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        for dr, dc in moves:
            new_row, new_col = row + dr, col + dc
            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_state = [row[:] for row in current_node.state]
                new_state[row][col], new_state[new_row][new_col] = new_state[new_row][new_col], new_state[row][col]
                if tuple(map(tuple, new_state)) not in closed_set:
                    open_set.put(PuzzleNode(new_state, current_node, (dr, dc)))
    return None

solution_path = solve_puzzle(initial_state, goal_state)
if solution_path:
    for state in solution_path:
        for row in state:
            print(row)
        print()
    print("Solved!")
else:
    print("No solution found.")